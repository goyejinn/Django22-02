*------------------------------------ 다대일 관계 구현하기 ----------------------------------------------*
[------------------------ ForeignKey로 author 필드 구현하기 ---------------------------]
1) models.py에 author 필드 구현하기
- from django.contrib.auth.models import User 추가하고 author 필드 만든 후, __str__() 함수 수정하기
blog/models.py
ex)
from django.db import models
from django.contrib.auth.models import User
import os

... 생략

class Post(models.Model) :
    ... 생략

    # 추후 author 작성
    author = models.ForeignKey(User, null=True, on_delete=models.SET_NULL)

    category = models.ForeignKey(Category, null=True, blank=True, on_delete=models.SET_NULL)
    def __str__(self):
        return f'[{self.pk}]{self.title}:: {self.author} : {self.created_at}'

2) 마이그레이션 하고 오류창이 나타나면 1을 입력해주기
* python manage.py makemigrations
오류 창이 뜨면 1 누르기
* python manage.py migrate

3) 다른 작성자가 게시물을 작성할때 테스트하기
- 관리자 페이지에서 새로운 사용자를 만들어준다.

4) 작성자 정보가 삭제될때 포스트가 삭제되는지 확인하기
models.py에서 author의 필드가 on_delete=models.CASADE로 지정되어서 작성자 정보가 삭제되면 포스트도 같이 삭제된다.

[-------------------- 연결된 사용자가 삭제되면 빈 칸으로 두기 -----------------------]
1) on_delete=models.SET_NULL 사용하기
blog/models.py
ex)
class Post(models.Model) :
        ... 생략
    # 추후 author 작성
    author = models.ForeignKey(User, null=True, on_delete=models.SET_NULL) <----입력값을 이렇게 해주면 사용자가 삭제되면 None으로 냅둬짐
        ... 생략

[------------------------- 포스트 목록 페이지와 포스트 사에 페이지에 author 반영하기 ------------------------------]
1) 포스트 목록 페이지에 작성자 추가하기
blog/tests.py
ex)
from django.test import TestCase, Client
from bs4 import BeautifulSoup
from .models import Post, Category
from django.contrib.auth.models import User <-----------이거 추가해주기

# Create your tests here.
class TestView(TestCase):

    def setUp(self):
        self.client = Client()
        self.user_kim = User.objects.create_user(username="kim", password="somepassword") <----------이것들 선언해주기
        self.user_lee = User.objects.create_user(username="lee", password="somepassword")

- 그 후 test_post_list() 함수에서는 Post 모델의 post_001과 post_002 레코드를 생성할때 각각
author=self.user_kim과 author=self.userlee를 인자로 추가해준다.
blog/tests.py
ex)
def test_post_list(self):
    ... 생략

    post_001 = Post.objects.create(title="첫번째 포스트",content="첫번째 포스트입니다", author=self.user_kim) <--- 인자 추가
    post_002 = Post.objects.create(title="두번째 포스트", content="두번째 포스트입니다", author=self.user_lee)

- 테스트 하기 위해서 test_post_list() 함수에 코드 추가
        self.assertIn(self.post_001.author.username.upper(), main_area.text)
        self.assertIn(self.post_002.author.username.upper(), main_area.text)

- 테스트 후 fail이 나온다. post_list.html을 수정해준다.
blog/templates/blog/post_list.html
ex)
                ... 생략
                  <div class="card-footer">
                      <div class="small text-muted">{{p.created_at | date:"Y-m-d h:m:s"}}</div>
                      <a href="#">{{p.author | upper}}</a> <----요것 추가
                  </div>
                ... 생략
2) 포스트 상세 페이지에 작성자 추가하기
- test_post_detail() 함수도 post_001에서 Post모델 레코드를 하나 생성할 때 작성자명을 포함하도록 수정하기
blog/test.py
ex)
    def test_post_detail(self):
        post_001 = Post.objects.create(title="첫번째 포스트", content="첫번째 포스트 입니다",
                                      author=self.user_kim)
                   ... 생략
        self.assertIn(self.post_001.author.username.upper(), post_area.text)

3) post_detail.html도 대문자로 나오게 수정하기
blog/templates/blog/post_detail.html
ex)
                    <header class="mb-4">
                            <!-- Post title-->
                            <h1 class="fw-bolder mb-1">{{post.title | lower}}</h1>

[------------------- 카테고리(Category) 모델 만들기 ---------------------]
1) models.py에 Category 모델 만들기
- name은 각 카테고리의 이름을 담는 필드, slug는 사람이 읽을 수 있는 텍스트로 고유 URL을 만든다.
blog/models.py
ex)
class Category(models.Model):
    name = models.CharField(max_length=50, unique=True)
    slug = models.SlugField(max_length=200, unique=True, allow_unicode=True)

    def __str__(self):
        return self.name

2) Post 모델에 category 필드 추가하기
blog/models.py
ex)
class Post(models.Model) :

    category = models.ForeignKey(Category, null=True, blank=True, on_delete=models.SET_NULL) <----Post 모델에 이거 추가

3) admin.py에 Category 모델 등록하기
-
blog/admin.py
ex)
from django.contrib import admin
from .models import Post, Category <---이거랑

# Register your models here.
admin.site.register(Post)

class CategoryAdmin(admin.ModelAdmin):  <--------이 아래 3줄 추가하기
    prepopulated_fields = {'slug' : ('name', )}
admin.site.register(Category, CategoryAdmin)

4) Meta로 모델의 복수형 알려주기
- Category의 복수형은 Categories이다. models.py에서 바꿔준다.
blog/models.py
ex)
class Category(models.Model):
    name = models.CharField(max_length=50, unique=True)
    slug = models.SlugField(max_length=200, unique=True, allow_unicode=True)

    def __str__(self):
        return self.name

    def get_absolute_url(self):
        return f'/blog/category/{self.slug}'

    class Meta:
        verbose_name_plural = 'Categories' <---------이것 추가하기

[------------------ 카테고리를 빈칸으로 남겨두기 ----------------------]
1)
- Post 모델의 category 필드에 blank=True를 추가로 지정하면 관리자 페이지에서 카테고리를 빈칸으로 지정할 수 있다.
blog/models.py
ex)
class Post(models.Model) :
        ... 생략
    category = models.ForeignKey(Category, null=True, blank=True, on_delete=models.SET_NULL)
        ... 생략

[------------------------ 포스트 목록 페이지 수정하기 ---------------------------]
1) 페이지 모양 구상하기

2) 테스트 코드 작성하기
blog/tests.py
ex)
from django.test import TestCase, Client
from bs4 import BeautifulSoup
from .models import Post, Category <------이것 추가
from django.contrib.auth.models import User

# Create your tests here.
class TestView(TestCase):

    def setUp(self):
        ... 생략
        self.category_com = Category.objects.create(name="computer", slug="computer")
        self.category_cul = Category.objects.create(name="culture", slug="culture") <--------이것들 추가

- 그 후 test_post_list에서 Post.object.create로 만들었던 요소를 모두 복사해 setUp()함수로 옮긴다. 앞에 self를 붙여준다.
blog/tests.py
ex)
from django.test import TestCase, Client
from bs4 import BeautifulSoup
from .models import Post, Category
from django.contrib.auth.models import User

# Create your tests here.
class TestView(TestCase):

    def setUp(self):
        ... 생략
        self.category_com = Category.objects.create(name="computer", slug="computer")
        self.category_cul = Category.objects.create(name="culture", slug="culture")

        self.post_001 = Post.objects.create(title="첫번째 포스트", content="첫번째 포스트 입니다", <-------- 이거 이하 추가
                                       author=self.user_kim,
                                       category=self.category_com)
        self.post_002 = Post.objects.create(title="두번째 포스트", content="두번째 포스트 입니다",
                                       author=self.user_lee,
                                       category=self.category_cul)
        self.post_003 = Post.objects.create(title="세번째 포스트", content="세번째 포스트 입니다",
                                       author=self.user_lee)

3) category_card_test() 함수 따로 만들기
-
blog/tests.py
ex)
    ...생략
class TestView(TestCase):

    def setUp(self):
        self.client = Client()
        ... 생략
        category_card = soup.find('div', id='category-card') <--------이 이하 작성
        self.assertIn('Categories', category_card.text)
        self.assertIn(f'{self.category_com} ({self.category_com.post_set.count()})', category_card.text)
        self.assertIn(f'{self.category_cul} ({self.category_cul.post_set.count()})', category_card.text)
        self.assertIn(f'미분류 (1)', category_card.text) <-----여기까지
    def test_post_list(self):
    ... 생략

4) test_post_list() 함수 대폭 수정하기
blog/tests.py
ex)
def_post_list()함수 참고

5) div 요소에 id 부여하기
- base.html에서 카드에 해당하는 div 요소에 categories-card를 id로 부여해야함
blog/templates/blog/sidebar.html
ex)
<div class="card mb-4" id='category-card'> <---------id 추가
              <div class="card-header">Categories</div>
                <div class="card-body">
                  <div class="row">
                          <ul class="list-unstyled mb-0">
                              {% for c in categories %}
                              <li><a href="{{c.get_absolute_url}}">{{c}} ({{c.post_set.count}})</a></li>
                              {% endfor %}
                              <li><a href="/blog/category/no_category/">미분류 ({{no_category_post_count}})</a></li>
                          </ul>
            ... 생략

6) get_contxt_data() 메서드로 category 관련 인자 넘기기
- blog/views.py에서 Category 레코드를 가져와 post_list.html에 반영해야함
blog/views.py
ex)
from django.shortcuts import render
from .models import Post, Category <---- 이거 추가
from django.views.generic import ListView, DetailView

# Create your views here.
class PostList(ListView):
    model = Post
    ordering = '-pk'

    def get_context_data(self, *, object_list=None, **kwargs): <-----이 함수 추가
        context = super(PostList, self).get_context_data()
        context['categories'] = Category.objects.all()
        context['no_category_post_count'] = Post.objects.filter(category=None).count
        return context

7) 템플릿 수정하기
- sidebar.html
blog/sidebar.html
ex)
            <div class="card mb-4" id='category-card'>
              <div class="card-header">Categories</div>
                <div class="card-body">
                  <div class="row">
                          <ul class="list-unstyled mb-0">
                              {% for c in categories %} <----------이 아래처럼 수정하기
                              <li><a href="{{c.get_absolute_url}}">{{c}} ({{c.post_set.count}})</a></li>
                              {% endfor %}
                              <li><a href="/blog/category/no_category/">미분류 ({{no_category_post_count}})</a></li>
                          </ul>

8) post_list.html 수정하기
blog/templates/blog/post_list.html
ex)
            <div class="card mb-4" id="post-{{p.pk}}"> <------id 추가하기
                  {% if p.head_image %}
                <img class="card-img-top" src="{{p.head_image.url}}" alt="{{p}}의 head_image" />
                  {% else %}
                  <img class="card-img-top" src="https://picsum.photos/seed/{{p.pk}}/800/200" alt="random image"/>
                  {% endif %}

9)
blog/templates/blog/post_list.html
ex)
              <div class="card mb-4" id="post-{{p.pk}}">
                  {% if p.head_image %}
                <img class="card-img-top" src="{{p.head_image.url}}" alt="{{p}}의 head_image" />
                  {% else %}
                  <img class="card-img-top" src="https://picsum.photos/seed/{{p.pk}}/800/200" alt="random image"/>
                  {% endif %}
                  <div class="card-body">
                      {% if p.category %}
                        <span class="badge badge-secondary float-right">{{p.category}}</span> <-----이것 추가하기
                      {% else %}
                        <span class="badge badge-secondary float-right">미분류</span>
                      {% endif %}

10) if문 사용하여 미분류 출력하도록 수정하기
blog/templates/blog/post_list.html
ex)
              <div class="card mb-4" id="post-{{p.pk}}">
                  {% if p.head_image %}
                <img class="card-img-top" src="{{p.head_image.url}}" alt="{{p}}의 head_image" />
                  {% else %}
                  <img class="card-img-top" src="https://picsum.photos/seed/{{p.pk}}/800/200" alt="random image"/>
                  {% endif %}
                  <div class="card-body">
                      {% if p.category %} <------- 이줄 이하 작성해서 미분류 출력되게 하기
                        <span class="badge badge-secondary float-right">{{p.category}}</span>
                      {% else %}
                        <span class="badge badge-secondary float-right">미분류</span>
                      {% endif %}

11) 웹 브라우저에서 직접 확인하기
blog/templates/blog/base.html

[---------------------- 포스트 상세 페이지 수정하기 ----------------------------]
1) 테스트 코드 수정하기
- test_post_detail 테스트 코드 수정하기
blog/tests.py
ex)
        def test_post_detail(self):
        #post_001 = Post.objects.create(title="첫번째 포스트", content="첫번째 포스트 입니다",
        #                              author=self.user_kim)
        <-------포스트 생성필요없으니 삭제, post_001을 self.post_001로 변경

        self.assertEqual(self.post_001.get_absolute_url(), '/blog/1/')

        response = self.client.get(self.post_001.get_absolute_url())
        self.assertEqual(response.status_code, 200)
        soup = BeautifulSoup(response.content, 'html.parser')

        #navbar = soup.nav
        #self.assertIn('Blog', navbar.text)
        #self.assertIn('AboutMe', navbar.text)
        self.nav_test(soup)

        self.assertIn(self.post_001.title, soup.title.text)

        main_area = soup.find('div', id='main-area')
        post_area = main_area.find('div', id='post-area')
        self.assertIn(self.post_001.title, post_area.text)
        self.assertIn(self.post_001.content, post_area.text)
        self.assertIn(self.post_001.author.username.upper(), post_area.text)

2) get_context_data() 메서드로 category 관련 인자 넘기기
- et_context_data() 메서드를 PostDetail에 추가할때 PostList만 PostDetail로 수정하기
blog/views.py
ex)
class PostDetail(DetailView):
    model = Post

    def get_context_data(self, **kwargs):
        context = super(PostDetail, self).get_context_data() <-------PostDetail로 수정
        context['categories'] = Category.objects.all()
        context['no_category_post_count'] = Post.objects.filter(category=None).count
        return context

3) 템플릿 수정하기
- post_detail.html에 post_list.html의 코드를 가져와 p.category를 post.category로 수정하기
blog/templates/blog/post_detail.html
ex)
    ... 생략
                        <!-- Post categories-->
                            {% if post.category %} <----
                                <a class="badge bg-secondary text-decoration-none link-light" href="#!">{{post.category}}</a>
                            {% else %}
                                <a class="badge bg-secondary text-decoration-none link-light" href="#!">미분류</a>
                            {% endif %}
    ... 생략

[--------------------- 카테고리 만들기 -----------------------]
1) 테스트 코드 만들기

2) Category 모델 수정하기
- Category 모델에 get_absoulte_url() 함수 정의
blog/models.py
ex)
class Category(models.Model):
    name = models.CharField(max_length=50, unique=True)
    slug = models.SlugField(max_length=200, unique=True, allow_unicode=True)

    def __str__(self):
        return self.name

    def get_absolute_url(self): <-------------- 이 함수 추가
        return f'/blog/category/{self.slug}'

    class Meta:
        verbose_name_plural = 'Categories'

3) URL 정의하기
- 사용자가 category/ 뒤에 문자열이 붙는 URL을 작성하면 그 문자열을 views.py에 정의할 category_page() 함수의 매개변수인 slug의 인자로 넘겨주도록 했다.
blog/urls.py
ex)
from django.urls import path
from . import views
urlpatterns = [ # IP 주소/blog
    path('', views.PostList.as_view()),
    path('<int:pk>/', views.PostDetail.as_view()),
    path('category/<str:slug>/', views.category_page) <-----------이것 추가

    #path('', views.index),  # IP 주소/blog
    #path('<int:pk>/', views.single_post_page)
]

4) 뷰 수정하기

blog/views.py
ex)
from django.shortcuts import render
from .models import Post, Category
from django.views.generic import ListView, DetailView

# Create your views here.
class PostList(ListView):

... 생략

def category_page(request, slug):
    if slug == 'no_category':
        category = '미분류'
        post_list = Post.objects.filter(category=None)
    else :
        category = Category.objects.get(slug=slug)
        post_list = Post.objects.filter(category=category)
    return render(request, 'blog/post_list.html', {
        'category' : category,
        'post_list' : post_list,
        'categories' : Category.objects.all(),
        'no_category_post_count' : Post.objects.filter(category=None).count
    })

5) 템플릿 수정하기
- 뱃지 디자인 고르고 클래스에 추가한뒤 if문을 사용해 category가 context로 넘어올 때만 그 카테고리 이름을 부트스트랩의 뱃지 형태로 출력한다.
blog/templates/blog/post_list.html
ex)
{% extends 'blog/base.html' %}

{% block main_area %}
              <h2>Blog
                    {% if category %}
                        - <span class="badge badge-secondary">{{ category }}</span>
                    {% endif %}
              </h2>

6) 미분류 카테고리 처리하기
blog/views.py
ex)
def category_page(request, slug):
    if slug == 'no_category':
        category = '미분류'
        post_list = Post.objects.filter(category=None)
    else :
        category = Category.objects.get(slug=slug)
        post_list = Post.objects.filter(category=category)
    return render(request, 'blog/post_list.html', {
        'category' : category,
        'post_list' : post_list,
        'categories' : Category.objects.all(),
        'no_category_post_count' : Post.objects.filter(category=None).count
    })